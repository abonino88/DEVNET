INTRODUCTION TO CISCO PLATFORMS
---------------------------------------------------------------------------------------------------------------------

WEBEX TEAMS
---------------------------------------------------------------------------------------------------------------------
Webex Teams incluye soluciones precompiladas con aplicaciones de terceros de proveedores como Microsoft, Google Cloud 
y Salesforce. Con las integraciones de Microsoft Office 365, Microsoft Exchange y Google Calendar, puede ver su lista 
de reuniones en Webex Teams.
•	Capaz de programar reuniones.
•	Los usuarios pueden compartir y editar archivos desde Microsoft OneDrive y SharePoint Online directamente en 
	espacios de Webex Teams.
Se pueden configurar otras integraciones mediante Webex App Hub para conectar equipos de Webex con el trabajo que 
se realiza en otras herramientas como Service Now, Trello, Asana, Salesforce y JIRA.

API de Webex Teams
------------------
Las API de Webex Teams son RESTful. 
Actualmente, la API solo admite la devolución de datos en formato application/json.  
Por ejemplo, si desea obtener una lista de todas las habitaciones (espacios) de las que es miembro, haría una 
solicitud GET a /memberships.

#CONSULTA API
import requests
import json
# This access token may be a (limited duration) personal access token, a Bot token, or an OAuth token from an 
# Integration or Guest Issuer application.
# IMPORTANT
# Make sure to replace access_token with YOUR access token.
access_token = 'PONER ACA MI TOKEN'
url = 'https://api.ciscospark.com/v1/people/me'
headers = {
    'Authorization': 'Bearer {}'.format(access_token)
}
res = requests.get(url, headers=headers)
#indent=4 indica qeu use 4 espacios para la sangria.
print(json.dumps(res.json(), indent=4))
#FIN CONSULTA API

#PAGINATION
#por defecto devuelve 100 registros como maximo
import requests
import json
access_token = '' # Make sure to add your access token here!
url = 'https://api.ciscospark.com/v1/memberships'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {
    "max": 1
}
res = requests.get(url, headers=headers, params=params)
formatted_message = """
Webex Teams API Response
----------------------------------
Response Status Code   : {}
Response Link Header   : {}
Response Body          : {}
-----------------------------------
""".format(res.status_code,  res.headers.get('Link'), json.dumps(res.json(), indent=4))
print(formatted_message)
#en el encabezado de respuesta LINK -> contiene datos de como recuperar datos adicionales
#FIN PAGINATION

#PAGINACION NEXT DATOS
# Make the next paginated API request
import requests
import json
access_token = ''  # Make sure to add your access token here
url = 'https://api.ciscospark.com/v1/memberships'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {
    "max": 1
}
res = requests.get(url, headers=headers, params=params)
second_response = requests.get(res.links['next']['url'], headers=headers)
formatted_message = """
Webex Teams Second API Response
----------------------------------
Response Status Code   : {}
Response Link Header   : {}
Response Body          : {}
-----------------------------------
""".format(second_response.status_code,  second_response.headers.get('Link'), json.dumps(second_response.json(), indent=4))
print(formatted_message)
#FIN PAGINACION NEXT DATOS





https://developer.webex.com
Documentation -> REST API -> Getting Started  (de aa saco del TOKEN) (No usar en produccion)

•	Utilice la API de Webex para crear webhooks que permitan una comunicación detallada y un control de aplicaciones 
	y servicios en respuesta a eventos específicos en los equipos de Webex.
•	Cree bots que emulen a los usuarios de Webex y median con aplicaciones externas para proporcionar servicios 
	(a menudo mediante webhooks).
•	Utilice webex Embedding APIs para Java, node.js, navegadores, iOS y Android, junto con Webex Widgets, para 
	incrustar la funcionalidad de mensajería/llamadas de voz/vídeo de Webex en aplicaciones de escritorio, web 
	y móviles.
	
#Listar personas de su organizacion
import requests
access_token = ''  # Make sure to add your access token here
url = 'https://api.ciscospark.com/v1/people'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {
    'email': '' # Make sure you add your users's email address here
}
res = requests.get(url, headers=headers, params=params)
print(res.json())

#DATOS DE UNA PERSONA EN PARTICULAR
person_id = '' # Add your ID here, which you get from the prior request
url = 'https://api.ciscospark.com/v1/people/{}'.format(person_id)
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
res = requests.get(url, headers=headers)
print(res.json())


#LISTADO DE ROOMS
import requests

access_token = ''  # Make sure to add your access token here
url = 'https://api.ciscospark.com/v1/rooms'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params={'max': '100'}
res = requests.get(url, headers=headers, params=params)
print(res.json())

#CREACION DE UN ROOM
import requests

access_token = ''  # Make sure to add your access token here
url = 'https://api.ciscospark.com/v1/rooms'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params={'title': 'DevNet Associate Training!'}
res = requests.post(url, headers=headers, json=params)
print(res.json())

#OBTENER DETALLES DE LA REUNION
room_id = '' # Make sure you add the room ID value that was returned from the previous call you made
url = 'https://api.ciscospark.com/v1/rooms/{}/meetingInfo'.format(room_id)
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
res = requests.get(url, headers=headers)
print(res.json())

#VER PERTENENCIAS
import requests

access_token = ''  # Make sure to add your access token here
room_id = ''
url = 'https://api.ciscospark.com/v1/memberships'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {'roomId': room_id}
res = requests.get(url, headers=headers, params=params)
print(res.json())

#AGREGAR A ALGUIEN A UNA SALA
import requests

access_token = ''  # Make sure to add your access token here
room_id = '' # Add the room Id from the previous example
person_email = '' # Add the email address of someone with a Webex Teams account
url = 'https://api.ciscospark.com/v1/memberships'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {'roomId': room_id, 'personEmail': person_email}
res = requests.post(url, headers=headers, json=params)
print(res.json())

#ENVIAR MENSAJES A UNA SALA en NEGRITA (MARKDOWN)
import requests

access_token = ''  # Make sure to add your access token here
room_id = '' # Add the roomId here
message = 'Hello **Devvie**' # This is your Markdown message
url = 'https://api.ciscospark.com/v1/messages'
headers = {
    'Authorization': 'Bearer {}'.format(access_token),
    'Content-Type': 'application/json'
}
params = {'roomId': room_id, 'markdown': message}
res = requests.post(url, headers=headers, json=params)
print(res.json())




WEBEX Devices
---------------------------------------------------------------------------------------------------------------------
Los dispositivos Webex se pueden personalizar a través de la API, conocida como xAPI. Esto permite la comunicación 
bidireccional con aplicaciones y sistemas de control de terceros.
Hay varias maneras de acceder a xAPI: conexión serial Telnet/SSH, HTTP y RS-232. 
Independientemente del método que elija, xAPI tiene el mismo formato general.
xAPI admite XML y JSON y proporciona acceso directo a través de la línea de comandos. 
También es compatible con macros de JavaScript para la personalización en el dispositivo.

Al hablar sobre los dispositivos Webex, Cisco está actualmente haciendo la transición hacia el uso del término 
generalizado "Extensiones de iU"(Customizacion de pantallas) (Touch 10 / DX)


SEGURIDAD
---------------------------------------------------------------------------------------------------------------------
Cisco proporciona una amplia cartera de tecnologías de seguridad y familias de productos que son 
configurables y manejables a través de API. Esta sección se centrará en:

•	Advanced Malware Protection (AMP) for Endpoints
		proporciona acceso API para automatizar los flujos de trabajo de seguridad e incluye capacidades 
		avanzadas de espacio aislado para inspeccionar cualquier archivo que parezca malware de una manera
		segura y aislada. AMP funciona con dispositivos Windows, Mac, Linux, Android e iOS a través de 
		implementaciones de nube pública o privada.
		Con la información proporcionada por la API de AMP, puede detectar, contener y eliminar malware avanzado.
		Se integra con Umbrella y Meraki (algunso otros)
		Con la API de AMP, puede buscar equipos o dispositivos que tengan asociaciones con un evento o actividad 
		determinado mediante parámetros de consulta. Por ejemplo, si conoce malware con una dirección URL o un 
		archivo .exe  determinado, puede ver qué equipos han entrado en contacto con él.
		
•	Cisco Firepower Management Center (FMC)
		consola de administración central para el Firewall para los FTD
		opciones de administración:
			•	FirePOWER Device Manager(FDM)/FTD-API/CDO – Estas tres opciones pueden coexistir.
			•	FirePOWER Management Center (FMC) – Para escenarios avanzados, FMC proporciona la mayor funcionalidad 
				del producto a través de su interfaz gráfica de usuario. Las capacidades de API entre los dos 
				son similares.

•	Cisco Firepower Threat Defense (FTD)
		Otra opción de administración es configurar directamente el dispositivo Firepower Threat Defense a través 
		de su API REST en el dispositivo, que proporciona capacidades de API similares a la API de FMC. La API 
		de FMC y las API de FTD no pueden coexistir directamente.
		
•	Cisco Identity Services Engine (ISE)
		El ISE proporciona un motor basado en reglas para habilitar el acceso de red basado en políticas a los 
		usuarios y a los dispositivos. 
		La arquitectura ISE de Cisco consiste en nodos.Un nodo es un dispositivo físico o virtual individual de 
		Cisco ISE que cumple alguno de estas funciones:
			Administration:	En este nodo usted realiza todas las operaciones administrativas en Cisco ISE. 
							Controla todas las configuraciones relacionadas con el sistema, como la autenticación,
							la autorización y la contabilidad.
			Policy Service:	proporciona el acceso a la red, la postura, el acceso del invitado, el 
							aprovisionamiento del cliente, y los servicios degeneración de perfiles
			Monitoring:	Almacena los mensajes de registro de todos los nodos de Administración y Servicio de 
						directivas de una red.
			pxGrid:	permite al sistema intercambiar datos depolítica y configuración entre nodos. 
		
•	Cisco Threat Grid
		plataforma de análisis de malware
		
•	Cisco Umbrella
		utiliza servidores de nombres de dominio (DNS) para aplicar la seguridad en la red. Configurar el DNS 
		para dirigir el tráfico a Umbrella y Umbrella aplica la configuración de seguridad en su lista global 
		de nombres de dominio en función de las directivas de su organización.
		Umbrella bloquea el acceso a dominios malintencionados, direcciones URL, direcciones IP y archivos. 
		Los datos de inteligencia de amenazas de paraguas incluyen una fuente de Cisco Talos. Cisco Talos es 
		un equipo de investigadores, analistas e ingenieros, que crean datos de amenazas precisos y procesables 
		y los mantienen actualizado para que los productos de Cisco los utilicen. 
		


