

	PLAIN TEXT (Muy inseguro)

	Password guardado en formato Plain text

	base de datos (id,username,password)   #el ppassword de guarda en PLAIN TEXT

###############################################################################################

#Verifica un nuevo perfil de usuario.
@app.route('/signup/v1, methods=[ 'POST'])
def signup_v1():
	conn = sqlite3.connect(db_name)
	c = conn_cursor()
	c.execute('''CREATE TABLE IF NOT EXISTS USER_PLAIN
						(USERNAME TEXT PRIMARY KEY NOT NULL,
						 PASSWORD TEXT NOT NULL);''')
	conn.commit()
	try:
		c.execute("INSERT INTO USER_PLAIN (USERNAME,PASSWORD) "
		                "VALUES ('{0}','{1}').format(request.form['username'],request.form['password']))
		conn.commit()
	except sqlite3.IntegrityError:
		return "username has been registered."
	print('username: ', request.form['username'], 'password: ',request.form['password']
	return "signup success"
	
###############################################################################################

#Verifica credenciales del usuario	
def verify_plain(username,password):
	conn = sqlite3.connect('test.db')
	c = conn.cursor()
	query = "SELECT PASSWORD FROM USER_PLAIN WHERE USERNAME = '{0}'".format(username)
	c.execute(query)
	records = c.fetchone()
	conn.close()
	if not records:
		return False
	return records[0] == password
@app.route('/login/v1', methods=['GET' , 'POST'])
def login_v1():
	error = None
	if request.method == 'POST':
		if verify_plain(request.form['username'],request.form['password']):
			error = 'login success'
		else:
			error = 'Invalid username/password'
	else:
		error = 'Invalid Method'
	return error

	HASING
	
	HASH: se transforma el password en una cadena qeu no se puede convertir en la cadena original
	
		1. es facil calcular el hash pero imposible volver a calcular la entrada inicial
		2. es dificil crear una entrada que de la misma salida

		DETERMINISTA : 	dado la misma entrada da la misma salida 
											si es hash es igual el password es el mimso aunque no sepa cual es

		
from haslib import sha256
#cree una instancia de la clase sha256
h = sha256()
#actualizo el objeto hash
h.update(b'devnetpassword1')
#Obtengo la cadena
hash = h.hexdigest()
print(hash)


	SALTED PASSWORD (Por mas que se use una funcion hash se le agregan datos aleatorios SAL)
	Incluso si las entradas son las mismas.

	PAra simular que la funcion HASH no parezca determinista se le agrega al PASSWROD una sal cadena de longitud
	fija de caracteres aleaorios.
	Almacenamos en la base de datos la SALtTagragada en PLAIN TEXT


###############################################################################################

	AUMENTANDO SEGURIDAD.
	
	Autenticacion de un solo factor.(SFA - Single Factor authentication)
		1 Una persona se autentica con su credencial
		2 Un hacker solo necesita conocer tu password
		
	Autenticacion de 2 Factores (2FA)
		1. Ejemplo: passwrod y algo que posee -- celular
		
	Autenticaion de multiples factores(MFA)
		1 credencales
		2 algo que saben
		3 algo que poseen
		4 algo que son
	
###############################################################################################
###############################################################################################

		PASSWORD CRACKING
		
		PASSWORD GUESSING(Adivinando)
			Intentan adivinarla - se evita con bloqueos de cuenta por reiterados errores
			Clipping level - ver cual es el limite de cortes ej. en cuantas intentos debo bloquear la cuenta.
			
		DICTIONARY ATTACK
			Fuerza bruta
			Se basa en probar una lista pre-armada de cadenas
			Son faciles de derrotar poniendo frases a al password (signos o cadenas no ordinarias)
			RAINBOW TABLE: se precalcula una lista de hashes selecciandas. estos ataques pueden verse frsutado por 
												el uso de salt.
			SOCIAL ENGINEERING: se basa en convencer a una persona para acceder.
			
###############################################################################################
###############################################################################################

	Information Security Culture
	El comportamiento de los empleados pueden tener un gran impacto en la seguridad de la info de las organizaciones
	ISC es la totalidad de patrones de comportamiento qeu contribuyen a la proteccion de la info en una organizacion
	
	TECNICAS: laingenieria social se basa en al influencia social humana
	
	RECIPROCITY(reciprocidad): nuestras normas sociales nos indican qeu tenemos que devolver un favor.
	COMMITMENT AND CONSISTENCY: Cuando las persona se comrpometen esmas probale que respeten ese 
																			comrpomiso.
	SOCIAL PROOF: Cuando las personas ven a otras hacer algo tienden a hacer lo mismo
	AUTHORUTY: La personas obedecen a figuras de autoridad
	LIKING: Las personas son persuadidas por gente qe les gusta o conocidas
	SCARCITY: (ESCACEZ) Cuando las persona sintes que algo esta en escacez es probalble que lo tomen
	
	VECTORES de ing social que aporvechan esto:
	
	PHISHIING: obtencio de l informacion en forma fraudulenta
	VISHING: PHISHING de VOZ se asocia a llamadas telefonicas
	SMISHNG: implica la utiizacion de mensajes de texto
	
	PASSWORD STRENGTH:
	Longitud:
	Complexity:
	Unpredictability:
	Hay herramientas de comprobacion de passwrod qeu comprueban la fuerza del password.
	
###############################################################################################
###############################################################################################

@app.route('/login/v2', methods=['GET' , 'POST'])
def login_v2():
	conn = sqlite3.connect(db_name)
	c = conn_cursor()
	c.execute('''CREATE TABLE IF NOT EXISTS USER_HASH
						(USERNAME TEXT PRIMARY KEY NOT NULL,
						 HASH TEXT NOT NULL);''')
	conn.commit()
	try:
		hash_value = hashlib.sha256(request.form['passwrod'].encode()).hexdigest()
		c.execute("INSERT INTO USER_HASH  (USERNAME,HASH) "
		                "VALUES ('{0}','{1}').format(request.form['username'], hash_value))
		conn.commit()
	except sqlite3.IntegrityError:
		return "username has been registered."
	print('username: ', request.form['username'], 'password: ',request.form['password'], 'hash: ',hash_value )
	return "signup success"
	
#Verifica credenciales del usuario	
def verify_hash(username,password):
	conn = sqlite3.connect('test.db')
	c = conn.cursor()
	query = "SELECT  HASH FROM USER_HASH WHERE USERNAME = '{0}'".format(username)
	c.execute(query)
	records = c.fetchone()
	conn.close()
	if not records:
		return False
	return records[0] == password
	
@app.route('/login/v2', methods=['GET' , 'POST'])
def login_v2():
	error = None
	if request.method == 'POST':
		if verify_hash(request.form['username'],request.form['password']):
			error = 'login success'
		else:
			error = 'Invalid username/password'
	else:
		error = 'Invalid Method'
	return error
	
if __name__ == '__main__':
	app.run(host='0.0.0.0', port=5000, ssl_context='adhoc')
	
	
USO DE CURL PARA VERIFICAR LA APLICACION:

#creacion de cuenta de usuario
curl -k -X POST -F 'username=bob' -F 'password=bobpassword' 'https://0.0.0.0:5000/signup/v2'

#verificacion de acceso
curl -k -X POST -F 'username=bob' -F 'password=bobpassword' 'https://0.0.0.0:5000/login/v2'


