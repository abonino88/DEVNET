
	API (Aplication Programming Interface)
	
	CASOS DE USOS:
	
		1. Automation tasks
			creacion de scripts que hagan las tareas manuales en forma automatica y mediante programacion
		2. Data Integration
			una aplicacion puede comsumir u reaccionar a datos porporciondos por otra aplicacion
		3. Functionality
			una aplicacion puede integrar funcionalidad de otra aplicacion
			
	TIPOS DE MODELOS

		1. SINCRONICAS
			 responden una solicitid directamente e inmediatamente
			 estan diseñadas en ocaciones donde los datos pueden ser accesibles rapidamente o estan alojados en 
			 base de datos.El servidor captura los datos y responde rapidamente.
			 Del lado del cliente la aplicacion debe esperar la respuesta antes de realizar cualquier otra tarea,
			 por lo cual bloquea su procesamiento a espera de la respuesta.
			 
		2. ASINCRONICAS
			las asincronicas proporsionan una respuesta indicando que ha reciibido la solicitud.
			el servidor la procesa y desencadena una devolucion de llamadas con los datos.
			El cliente puede procesar los mismos una vez recibidos.
			la aplicacion puede realizar otras tareas y no quedar a la espera de la respuesta.
			Del lado del cliente se puede implementar un agente de escucha o mecanismo de devolucion de llamada.
			Otros modelos necesitan que el cliente implemente un mecanismo de sondeo para ver el estado de la solicitud.
	
	COMMON ARCHITECTURAL STYLES
	
		RPC(Remote Procedure Call)
		Llamada a procedimiento remoto (RPC) es un modelo de solicitud-respuesta que permite a una aplicación (actuando como cliente) 
		realizar una llamada de procedimiento a otra aplicación (actuando como un servidor). 
		EL uso mas comun es que el cliente realiza una solicitud sincronica al servidor y se bloquea mientras el servidor
		procesa la respuesta.
		Protocolos: XML-RPC / JSON-RPC / NFS / SOAP
		
			SOAP(Simple Object Access Protocol)
			Es un protocolo basado en XML - se utiliza comunmente con el transporte de protocolo de transferencia de Hipertexto
			
			Caracteristicas:
				Independiente: 	SOAP se diseñó para que todos los tipos de aplicaciones puedan comunicarse entre sí, 
								sin importar lo diferentes que sean. Las aplicaciones se pueden crear utilizando diferentes 
								lenguajes de programación, se pueden ejecutar en diferentes sistemas operativos y pueden 
								ser lo más diferentes posible.
				Extensible: SOAP en sí se considera una aplicación de XML, por lo que las extensiones se pueden construir 
							encima de él. Esta extensibilidad significa que puede agregar características como fiabilidad 
							y seguridad.
				Neutral: SOAP se puede utilizar sobre cualquier protocolo, incluidos HTTP, SMTP, TCP, UDP o JMS.
				
			Elementos del mensaje SOAP:
				Envelope: es el elmento raiz del documento XML. EL namespace define que el documento ML es un mensjae SOAP
				Header: contiene informacion especifica de la aplicacion (autorizacion, etc)
				Body: contine los datos a enviar al detinatario, Deben estar en formato XML y en su propio espacio de nombres
				Fault: proporciona informacion de error o estado (Opcinal-es un elemento secundaruio del body)

			
		REST(REpresentational State Transfer)
		
			establece 6 restriciones:
				Client-Server: deben independientes
				Stateless: 	Las solicitudes del cliente al servidor deben contener toda la información que el servidor 
							necesita para realizar la solicitud. El servidor no puede contener estados de sesión.
				Cache: 	Las respuestas del servidor deben indicar si la respuesta se puede almacenar en caché o no. 
						Si se puede almacenar en caché, el cliente puede usar los datos de la respuesta para 
						solicitudes posteriores. (Ej, next en paginacion)
				Uniform interface: deben tener estas caracteristicas
						identification of resources:	en la solicitud se debe identificar un recurso al que el servidor 
														tendra acceso
						manipulation of resource though representations: el cliente recibe una representacion del recurso 
																		 con todos los datos neceserios para procesarlos (por 
																		 ejemplo si pide un usuario se le devuelve un DICT con 
																		 los datos del mismo)
						Self-descriptive messages: 	cada mensaje debe contener toda la imformacion para que el cliente pueda
													procesarlo.
													tipo de portocolo.
													formato del mensaje
													operacion solicitada.
						Hypermedia as the engine of application state: el mensaje debe tener los datos necesarios para que el 
																		clietne pueda aceeder a datos adicionales.
				Layered system:	el sistema se compone de diferentes capas jerarquicas
				Code-of-demand: la imformacion devuelta puede incluir codigo ejecutable.(Ej.: javascript)
				
		
	REST WEB SERVICE APIs (se adhiere a los 6 principios de la arquitecture REST)
	
		Comuniacion a travez del Protocolo HTTP
		1. HTTP requests/response
		2. HTTP verbs
		3. HTTP status codes
		4. HTTP headers/body
		
	###############################################################################
	REST API requests
	
		1. URI (Uniform Resource Identifier)
				Identifica el recurso a manipular.
				URI:  scheme:[//authority][/path][?query]
						
						scheme: 	http: conexxion abierta
								https: conexion segura
						authority:	host:port	 (nombre del host o direccion de ip :  puerto de comunicacion)
						path:		ruta de acceso al recurso
						query:		es opcional e indical los parametros de la consulta.
						
						Ej: 	https://10.54.1.95:445/api/v1/coSpaces?filter=sala
							retorna todos los espacio de un CMS en donde el nombre contiene la cadena sala
		
		2. HTTP Method (HTTP Verbs)
				POST				(Create un nuevo objeto o recurso)
				GET				(Read recupero datos de un recurso del sistema)
				PUT				(Reemplaza o Actualiza un recurso del sistema)
				PATCH				(Actulizacion Parcial de un recurso existente)
				DELETE				(Borra algun recurso del sistema)
				
		3. Header
				Informacion opcional.
				los encabezados tienen el formato <nombre>:<valor>
				REQUEST HEADERS
					es informacion adicional qeu no tiene nada qeu ver con el contenido del mensaje
					Ej: Authorization
				ENTITY HEADERS
					es informcion adiional que describe el contenido del mensaje
					Ej.: Content-Type
					
		4.Body
				Continen los datos que el usuario desea manipular
				
		RESPUESTAS DE LAS API REST.
		---------------------------
		
		son respuestas HTTP
			HTTP Status
			-----------
			API REST utiliza ls codigos de estado HTTP
			1xx informativo (ej. indica que el servidor recibio la solicitud - no tiene body)
			2xx Exito (el servidor recibio la solicitud y acepto envia datos en el Bady si corresponde -- en 
						servicios asincronicos 2xx en una confirmacion de que se recibio la solicitud, pero aun 
						falta procesrla)
			3xx redireccion (Las respuestas con un código 3xx significan que el cliente tiene una acción 
							adicional que realizar para que se complete la solicitud.) 
			4xx error de cliente  ( indica que la solicitud tiene un error -- sintaxis o entrada invalida)
			5xx error del servidor (Las respuestas con un código 5xx significan que el servidor no puede 
									satisfacer la solicitud aunque la solicitud en sí sea válida.) 
		
			200:	OK						la solicitud se realizo en forma correcta
			201:	Created					Se cumplio la solicitud y se creo el recurso solicitado
			202:	Accepted				la solicitud de acepto para el procesamiento
			400:	Bad Request				la solicitud no se preceso porque hay una error en el request
			401:	Unauthorization			la solicitud no tiene credenciales de autenticacion validas
			403:	Forbidden				La solicitud se entendió, pero ha sido rechazada por el servidor
			404:	Not Found				no se encontro la ruta del acceso al servidor
			500:	Internal Server Error	la solicitud no se puede complir debido a un error en el servidor
			503:	Service Unavailable		la solicitud no se puede complir porque actualmente el servidor
											no puede manejarla.
		
			Headers
			-------
			Response Headers: 	No se relicionan con el contenido
								ej: Set-Cookie  // Cache-Control
			Entity headers:		informacion adicional que describe el contenido del cuerpo del mensaje
								ej: Content-Type:application/json
								
			Body
			----
			Datos que el cliente solicito. el tipo de datos se especifica en el Headers en Content-Type.
			Si la solicitud no se realizao correctamente el Bady puede proporcionar info adicional sobre el
			problema o una accion que debe rezlizarse pra que la solicitud se realice correctamente.
			
			PAGINATION
			----------
			Es posible que algunas API, como una API de búsqueda, necesiten enviar una gran cantidad de datos 
			en la respuesta. Para reducir el uso del ancho de banda en la red, estas API paginarán los datos 
			de respuesta.
			La paginación de respuestas permite dividir los datos en fragmentos. 
			La mayoría de las API que implementan la paginación permitirán al solicitante especificar cuántos 
			elementos desea en la respuesta. Dado que hay varios fragmentos, la API también tiene que permitir 
			que el solicitante especifique qué fragmento desea. 
			No hay una forma estándar para que una API implemente la paginación, pero la mayoría de las 
			implementaciones usan el parámetro de consulta para especificar qué página se va a devolver 
			en la respuesta.
			
			Compressed responde data
			------------------------
			Cuando el servidor necesita enviar grandes cantidades de datos que no se pueden paginar, los datos 
			comprimidos es otra forma de reducir el ancho de banda.
			Esta compresión de datos puede ser solicitada por el cliente a través de la propia solicitud de API. 
			Para solicitar una compresión de datos, la solicitud debe agregar el campo Accept-Encoding
			gzip / compress / deflate / br / identity / *
			Si el servidor no puede proporcionar ninguno de los tipos de compresión solicitados, enviará una 
			respuesta con un código de estado de 406 -- No aceptable.
			Si el servidor cumple la compresión, enviará la respuesta de vuelta con los datos comprimidos y 
			agregará el campo Content-Encoding al encabezado de respuesta. El valor de  Content-Encoding  
			es el tipo de compresión que se usó, lo que permite al cliente descomprimir los datos 
			de forma adecuada.}
			
			Diagrama de secuencia:
			UML (Unified Modeling Languaje)


			
			
				
				
				
	AUTHENTICATION-AUTHORIZATION
		
		1. Authentication
			verificacion de la identidad del usaurio
		2. Authorization
			proceso por el cual el usuario demuestre que tienen los permisos necesarios para relaizar alguna accion
		
		BASIC:
			Authorization: Basic <username>:<passwrod>
			la credenciales se transmiten codificados mediante Base64
			Este metodo es miy fragil por lo que se reomienda usar HTTPS, de lo contrario las credecniales
			aunque esten codificadas no estaran cifradas.
			
		BEARER: (token authorization)
			Authorization: Bearer  <bearer token>
			debe ser usado con HTTPS
			tambien conocido como Token Authentication
			tipicamente usado con OAuth y SSO(Single Sign-On)
			El Bearer token es un string generado por un servidor de autenticacion por ejemplo un Identity Service(IdS)
		
		API Key:
			conocido tambien como API Token
			
			es una cadena alfanumerica generado por un servidro y asignada a un usuario.
			Generalmente para obtener el key el user debera logeare con sus credenciales en un portal.
			esta se asigan una vez y no se regenera.
			solo son seguras unsando HTTPS
	


#EJEMPLOS EN PYTHON
##################################################################################################	
			
#HTTP GET en PYTHON
import requests
import json
url = "http://localhost:8080/v1/books"
books = requests.get(url)
#la funcion .json() transforma la respuesta a un dictionary
#devolucion  Content-Type aplication/json
print(json.dumps(books.json(), indent=4))


#HTTP POST en PYTHON
import requests
import json
url = "http://localhost:8080/v1/books"
book = {
	"name" = "titulo de libro",
	"authors" = ["autor1","autor2"],
	"date" = 1968,
	"isbn" = "0-201-03801-3"
}
response = requests.POST(url, json=book)
print(response.status_code)

#HTTP POST CON LIBRERIA urllib
import urllib
import json
url = "http://localhost:8080/v1/books"
book = {
	"name" = "titulo de libro",
	"authors" = ["autor1","autor2"],
	"date" = 1968,
	"isbn" = "0-201-03801-3"
}
payload = json.dumps(book).encode('utf8')
requests = urllib.requests.Requist(url, data=payload,headers={'Content-Type' : 'application/json'})
responde= urllib.requests.urlopen(request)
print(response.status)


#HTTP PUT
import requests
import json
url = "http://localhost:8080/v1/books"
book = {
	"name" = "titulo de libro",
	"authors" = ["autor1","autor2"],
	"date" = 1968,
	"isbn" = "0-201-03801-3"
}
response = requests.POST(url, json=book)
book_data = responde.json()
print("Response after ADDING the book to the library)
print(json.dumps(book_data, indent=4))
#modifico un valor
book_data["authors "] = ['Autor corregido"]
update_book_url = "http://localhost:8080/v1/books/{}".format(book_data['uuid'])
reponse = requests.put(update_book_url, json=book_data)
print("http status code after updating the book: ", response.status_code)

#HTTP DELETE
import requests
import json
url = "http://localhost:8080/v1/books"
book = {
	"name" = "titulo de libro",
	"authors" = ["autor1","autor2"],
	"date" = 1968,
	"isbn" = "0-201-03801-3"
}
#agrego el libro
response = requests.POST(url, json=book)
book_data = responde.json()
#lo borro
#en book_data al agregar el libro me devulve el uuid (location)
delete_book_url =  "http://localhost:8080/v1/books/{}".format(book_data['uuid'])
response = requests.delete(delete_book_url)
print("http status code after deleting the book: ", response.status_code)


#BASIC AUTHETICATION
#si se usa autenticacion basica se use tambien HTTPS de lo contrario el user y pass se transmiten en texto no cifrado
import requests
from requests.auth import HTTPBasicAuth
import json
import sys
url = "http://localhost:8080/v1/accounts"
username = 'admin'
passwrod = 'ahsdlasjldjqwdljhwjqhwldjhqwdljqhwldjqwdhqwdjkqwhdlqjwdhlqwjdhlqwjdqlwdj'
accouns = requests.get(url,auth=HTTPBasicAuth(username,password))
try:
	accounts.raise_for_status()
except requests.exceptions.HTTPError as e:
	#este codigo no se ejecuta si el user y pass con correctos
	print("Error : {}".format(e))
	sys.exit()
#este codigo se ejecuta siempre
print(accounts.status_code)
